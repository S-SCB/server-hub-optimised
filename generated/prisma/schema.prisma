generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers       Server[]
  serverMembers ServerMember[]
  groupMembers  GroupMember[]
  messages      Message[]

  sentMessages     DirectMessage[] @relation("SentMessages")
  receivedMessages DirectMessage[] @relation("ReceivedMessages")
}

model Server {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?
  bannerUrl   String?
  category    String
  isPrivate   Boolean @default(false)
  accessKey   String?
  ownerId     String  @db.ObjectId
  owner       User    @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members ServerMember[]
  groups  Group[]
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
  VISITOR
}

model ServerMember {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  userId   String     @db.ObjectId
  serverId String     @db.ObjectId
  role     MemberRole @default(VISITOR) // admin, moderator, member
  joinedAt DateTime   @default(now())

  user   User   @relation(fields: [userId], references: [id])
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model Group {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?
  isPrivate   Boolean @default(false)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id])

  members  GroupMember[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  userId   String     @db.ObjectId
  groupId  String     @db.ObjectId
  role     MemberRole @default(MEMBER) // admin, moderator, member
  joinedAt DateTime   @default(now())

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Channel {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  type        String  @default("text") // text, voice, video
  groupId     String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String @db.ObjectId
  channelId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}
